#include simplsharp
#user_functions
#local_functions
#gloabl_functions

#test_config_set_1
#test_config_set_2
#update_config_set_1
#update_config_set_2
#release_config_set_1
#release_config_set_2


// Declare systems
Lighting_System Light_System;
HVAC_System HVAC_System;
AV_System AV_System;
Security_System Sec_System;
Environmental_Sensor_System Env_Sensor_System;

// Configuration settings for each subsystem

// Lighting System settings
bool LIGHTS_ON = true;
int LIGHT_BRIGHTNESS = 70;
string LIGHT_MODE = "NORMAL";
bool LIGHT_AUTO_DIM = true;
int LIGHT_DIM_LEVEL = 30;
int LIGHT_DIM_TIME = 10;
bool LIGHT_MOTION_DETECT = true;
bool LIGHT_EVENING_MODE = false;
string LIGHT_COLOR = "WHITE";
bool LIGHT_NIGHT_MODE = false;

// HVAC System settings
bool HVAC_ON = true;
int HVAC_TEMPERATURE = 72;
bool HVAC_AUTO_MODE = true;
string HVAC_MODE = "COOL";
int HVAC_FAN_SPEED = 2;
bool HVAC_ECO_MODE = false;
bool HVAC_QUIET_MODE = false;
int HVAC_AUTO_TEMP = 75;
bool HVAC_HEAT_MODE = false;
int HVAC_COOL_TEMP = 65;

// AV System settings
bool AV_ON = true;
int AV_VOLUME = 50;
string AV_SOURCE = "HDMI1";
bool AV_MUTE = false;
string AV_MODE = "MOVIE";
bool AV_SURROUND = true;
int AV_BRIGHTNESS = 50;
bool AV_PARENTAL_CONTROL = false;
int AV_CONTRAST = 50;
string AV_AUDIO_MODE = "DOLBY";

// Security System settings
bool SECURITY_ON = true;
bool SECURITY_ALARM = false;
string SECURITY_MODE = "AWAY";
bool SECURITY_MOTION_DETECT = true;
bool SECURITY_WINDOW_SENSOR = true;
bool SECURITY_DOOR_SENSOR = true;
bool SECURITY_GLASS_BREAK_SENSOR = true;
bool SECURITY_SMOKE_DETECTOR = true;
bool SECURITY_CO_DETECTOR = true;
string SECURITY_KEYPAD_CODE = "1234";

// Environmental Sensor System settings
bool ENV_SENSOR_ON = true;
bool ENV_SENSOR_TEMP_DETECT = true;
int ENV_SENSOR_TEMP_THRESHOLD = 80;
bool ENV_SENSOR_HUMIDITY_DETECT = true;
int ENV_SENSOR_HUMIDITY_THRESHOLD = 70;
bool ENV_SENSOR_LIGHT_DETECT = true;
int ENV_SENSOR_LIGHT_THRESHOLD = 300;
bool ENV_SENSOR_SOUND_DETECT = true;
int ENV_SENSOR_SOUND_THRESHOLD = 50;
bool ENV_SENSOR_MOTION_DETECT = true;
int ENV_SENSOR_MOTION_THRESHOLD = 10;



// Main function
public void Main()
{
   // Initialize systems
   Light_System.Initialize();
   HVAC_System.Initialize();
   AV_System.Initialize();
   Sec_System.Initialize();
   Env_Sensor_System.Initialize();

   // Set default states
   Light_System.SetDefaultState();
   HVAC_System.SetDefaultState();
   AV_System.SetDefaultState();
   Sec_System.SetDefaultState();
   Env_Sensor_System.SetDefaultState();
}

#include simplsharp
#user_functions
#local_functions
#gloabl_functions

#test_config_set_1
#test_config_set_2
#update_config_set_1
#update_config_set_2
#release_config_set_1
#release_config_set_2


// Declare systems
Lighting_System Light_System;
HVAC_System HVAC_System;
AV_System AV_System;
Security_System Sec_System;
Environmental_Sensor_System Env_Sensor_System;

// Configuration settings for each subsystem

// Lighting System settings
bool LIGHTS_ON = true;
int LIGHT_BRIGHTNESS = 70;
string LIGHT_MODE = "NORMAL";
bool LIGHT_AUTO_DIM = true;
int LIGHT_DIM_LEVEL = 30;
int LIGHT_DIM_TIME = 10;
bool LIGHT_MOTION_DETECT = true;
bool LIGHT_EVENING_MODE = false;
string LIGHT_COLOR = "WHITE";
bool LIGHT_NIGHT_MODE = false;

// HVAC System settings
bool HVAC_ON = true;
int HVAC_TEMPERATURE = 72;
bool HVAC_AUTO_MODE = true;
string HVAC_MODE = "COOL";
int HVAC_FAN_SPEED = 2;
bool HVAC_ECO_MODE = false;
bool HVAC_QUIET_MODE = false;
int HVAC_AUTO_TEMP = 75;
bool HVAC_HEAT_MODE = false;
int HVAC_COOL_TEMP = 65;

// AV System settings
bool AV_ON = true;
int AV_VOLUME = 50;
string AV_SOURCE = "HDMI1";
bool AV_MUTE = false;
string AV_MODE = "MOVIE";
bool AV_SURROUND = true;
int AV_BRIGHTNESS = 50;
bool AV_PARENTAL_CONTROL = false;
int AV_CONTRAST = 50;
string AV_AUDIO_MODE = "DOLBY";

// Security System settings
bool SECURITY_ON = true;
bool SECURITY_ALARM = false;
string SECURITY_MODE = "AWAY";
bool SECURITY_MOTION_DETECT = true;
bool SECURITY_WINDOW_SENSOR = true;
bool SECURITY_DOOR_SENSOR = true;
bool SECURITY_GLASS_BREAK_SENSOR = true;
bool SECURITY_SMOKE_DETECTOR = true;
bool SECURITY_CO_DETECTOR = true;
string SECURITY_KEYPAD_CODE = "1234";

// Environmental Sensor System settings
bool ENV_SENSOR_ON = true;
bool ENV_SENSOR_TEMP_DETECT = true;
int ENV_SENSOR_TEMP_THRESHOLD = 80;
bool ENV_SENSOR_HUMIDITY_DETECT = true;
int ENV_SENSOR_HUMIDITY_THRESHOLD = 70;
bool ENV_SENSOR_LIGHT_DETECT = true;
int ENV_SENSOR_LIGHT_THRESHOLD = 300;
bool ENV_SENSOR_SOUND_DETECT = true;
int ENV_SENSOR_SOUND_THRESHOLD = 50;
bool ENV_SENSOR_MOTION_DETECT = true;
int ENV_SENSOR_MOTION_THRESHOLD = 10;



// Main function
public void Main()
{
   // Initialize systems
   Light_System.Initialize();
   HVAC_System.Initialize();
   AV_System.Initialize();
   Sec_System.Initialize();
   Env_Sensor_System.Initialize();

   // Set default states
   Light_System.SetDefaultState();
   HVAC_System.SetDefaultState();
   AV_System.SetDefaultState();
   Sec_System.SetDefaultState();
   Env_Sensor_System.SetDefaultState();
}

public class Room
{
    public string RoomType { get; set; }
    public bool HasHVAC { get; set; }
    public bool HasAV { get; set; }
    public bool HasSecuritySystem { get; set; }
    public bool HasEnvSensors { get; set; }

    public virtual void ControlLight(string command)
    {
        if (LIGHTS_ON && command == "DIM" && LIGHT_AUTO_DIM)
        {
            int dimLevel = LIGHT_BRIGHTNESS - LIGHT_DIM_LEVEL;
            DimLight(dimLevel);
        }
        else if (command == "ON")
        {
            TurnLightOn(LIGHT_BRIGHTNESS);
        }
        else if (command == "OFF")
        {
            TurnLightOff();
        }
        else
        {
            throw new Error(100, "Invalid command for lights");
        }
    }

    public virtual void ControlHVAC(string command, int temperature)
    {
        if (!HasHVAC)
        {
            throw new Error(201, "Room does not have HVAC system");
        }

        if (HVAC_ON && command == "SET" && HVAC_AUTO_MODE)
        {
            SetTemperature(temperature);
        }
        else if (command == "COOL")
        {
            SetHVACMode(HVAC_MODE);
            SetFanSpeed(HVAC_FAN_SPEED);
        }
        else if (command == "HEAT")
        {
            SetHVACMode(HVAC_MODE);
            SetFanSpeed(HVAC_FAN_SPEED);
        }
        else
        {
            throw new Error(200, "Invalid command for HVAC");
        }
    }

    public virtual void ControlAV(string command)
    {
        if (!HasAV)
        {
            throw new Error(301, "Room does not have AV system");
        }

        if (AV_ON && command == "SET_SOURCE")
        {
            SetSource(AV_SOURCE);
        }
        else if (command == "VOLUME_UP")
        {
            SetVolume(AV_VOLUME + 10);
        }
        else if (command == "VOLUME_DOWN")
        {
            SetVolume(AV_VOLUME - 10);
        }
        else
        {
            throw new Error(300, "Invalid command for AV");
        }
    }

    public virtual void ControlSecurity(string command)
    {
        if (!HasSecuritySystem)
        {
            throw new Error(401, "Room does not have Security system");
        }

        if (SECURITY_ON && command == "ARM")
        {
            ArmSystem(SECURITY_MODE);
        }
        else if (command == "DISARM")
        {
            DisarmSystem(SECURITY_KEYPAD_CODE);
        }
        else
        {
            throw new Error(400, "Invalid command for Security");
        }
    }

    public virtual void ControlEnvSensor(string command)
    {
        if (!HasEnvSensors)
        {
            throw new Error(501, "Room does not have Environmental Sensors");
        }

        if (ENV_SENSOR_ON && command == "TEMP")
        {
            GetTemperature(ENV_SENSOR_TEMP_THRESHOLD);
        }
        else if (command == "HUMIDITY")
        {
            GetHumidity(ENV_SENSOR_HUMIDITY_THRESHOLD);
        }
        else
        {
            throw new Error(500, "Invalid command for Environmental Sensors");
        }
    }

    protected void DimLight(int dimLevel) { /* dim the light to the specified level */ }
    protected void TurnLightOn(int brightness) { /* turn the light on with the specified brightness */ }
    protected void TurnLightOff() { /* turn the light off */ }
    protected void SetTemperature(int temperature) { /* set the HVAC temperature */ }
    protected void SetHVACMode(string mode) { /* set the HVAC mode */ }
    protected void SetFanSpeed(int speed) { /* set the HVAC fan speed */ }
    protected void SetSource(string source) { /* set the AV source */ }
    protected void SetVolume(int volume) { /* set the AV volume */ }
    protected void ArmSystem(string mode) { /* arm the security system */ }
    protected void DisarmSystem(string code) { /* disarm the security system */ }
    protected void GetTemperature(int threshold) { /* get the temperature from environmental sensors */ }
    protected void GetHumidity(int threshold) { /* get the humidity from environmental sensors */ }
    
    // Security
    protected void SetGlassBreakSensor() { /* enable glass break sensor */ }
    protected void SetDoorOpenSensor() { /* enable door open sensor */ }
    protected void SetMotionDetector() { /* enable motion detector */ }
    protected void SetWindowSensor() { /* enable window sensor */ }
    protected void SetSmokeDetector() { /* enable smoke detector */ }
    protected void SetCarbonMonoxideDetector() { /* enable carbon monoxide detector */ }
    protected void SetKeypadCode(string code) { /* set the security system keypad code */ }
    protected void DetectSoundLevel() { /* detect sound level from environmental sensors */ }
    protected void DetectMotion() { /* detect motion from environmental sensors */ }
    protected void SetMotionDetector() { /* enable motion detector */ }
    protected void SetWindowSensor() { /* enable window sensor */ }
    protected void SetSmokeDetector() { /* enable smoke detector */ }
    protected void SetCarbonMonoxideDetector() { /* enable carbon monoxide detector */ }
    protected void SetKeypadCode(string code) { /* set the security system keypad code */ }
}

public class KingRoom : Room
{
    public KingRoom()
    {
        RoomType = "ROOM_KING";
        HasHVAC = true;
        HasAV = true;
        HasSecuritySystem = true;
        HasEnvSensors = true;
    }

    public override void ControlLight(string command)
    {
        base.ControlLight(command);

        // Additional logic specific to KingRoom lighting control
        if (RoomType == "ROOM_KING")
        {
            if (command == "MOOD")
            {
                SetMoodLighting();
            }
        }
    }

    public override void ControlHVAC(string command, int temperature)
    {
        base.ControlHVAC(command, temperature);

        // Additional logic specific to KingRoom HVAC control
        if (RoomType == "ROOM_KING")
        {
            if (command == "ECO")
            {
                SetEcoMode();
            }
            else if (command == "QUIET")
            {
                SetQuietMode();
            }
        }
    }

    public override void ControlAV(string command)
    {
        base.ControlAV(command);

        // Additional logic specific to KingRoom AV control
        if (RoomType == "ROOM_KING")
        {
            if (command == "SURROUND_ON")
            {
                SetSurroundSoundOn();
            }
            else if (command == "SURROUND_OFF")
            {
                SetSurroundSoundOff();
            }
        }
    }

    public override void ControlSecurity(string command)
    {
        base.ControlSecurity(command);

        // Additional logic specific to KingRoom security control
        if (RoomType == "ROOM_KING")
        {
            if (command == "SET_CODE")
            {
                SetKeypadCode("9876");
            }
        }
    }

    public override void ControlEnvSensor(string command)
    {
        base.ControlEnvSensor(command);

        // Additional logic specific to KingRoom environmental sensor control
        if (RoomType == "ROOM_KING")
        {
            if (command == "SOUND")
            {
                DetectSoundLevel();
            }
            else if (command == "MOTION")
            {
                DetectMotion();
            }
        }
    }

    // Additional methods specific to KingRoom
    protected void SetMoodLighting() { /* Code to set mood lighting in KingRoom */ }
    protected void SetEcoMode() { /* Code to set eco mode for HVAC in KingRoom */ }
    protected void SetQuietMode() { /* Code to set quiet mode for HVAC in KingRoom */ }
    protected void SetSurroundSoundOn() { /* Code to turn on surround sound in KingRoom */ }
    protected void SetSurroundSoundOff() { /* Code to turn off surround sound in KingRoom */ }
}

// Handles lighting controls
public void LightingControl(string roomType, string lightType, string mode, int brightness)
{
    switch (roomType)
    {
        case "BEDROOM":
            if (lightType == "DIMMABLE")
            {
                if (mode == "ON")
                {
                    Bedroom_Lights.TurnOn();
                    Bedroom_Lights.SetBrightness(brightness);
                }
                else if (mode == "OFF")
                {
                    Bedroom_Lights.TurnOff();
                }
                else if (mode == "DIM")
                {
                    Bedroom_Lights.DimTo(LIGHT_MIN_BRIGHTNESS);
                }
            }
            break;

        case "MAIN_ROOM":
            if (lightType == "NONDIMMABLE")
            {
                if (mode == "ON")
                {
                    Main_Room_Lights.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Main_Room_Lights.TurnOff();
                }
            }
            break;

        case "BATHROOM":
            if (lightType == "AUTOMATIC")
            {
                if (mode == "ON" && Bathroom_Sensors.MotionDetected())
                {
                    Bathroom_Lights.TurnOn();
                }
                else if (mode == "OFF" && !Bathroom_Sensors.MotionDetected())
                {
                    Bathroom_Lights.TurnOff();
                }
            }
            break;

        case "FOYER":
            if (lightType == "AMBIENT")
            {
                if (mode == "ON")
                {
                    Foyer_Lights.TurnOn();
                    Foyer_Lights.SetAmbience(brightness);
                }
                else if (mode == "OFF")
                {
                    Foyer_Lights.TurnOff();
                }
            }
            break;

        case "CONFERENCEROOM":
            if (lightType == "PROJECTION")
            {
                if (mode == "ON")
                {
                    ConferenceRoom_Lights.TurnOn();
                    ConferenceRoom_Lights.SetBrightness(brightness);
                }
                else if (mode == "OFF")
                {
                    ConferenceRoom_Lights.TurnOff();
                }
            }
            break;

        case "GATHERINGROOM":
            if (lightType == "MULTIMODE")
            {
                if (mode == "ON")
                {
                    GatheringRoom_Lights.TurnOn();
                    GatheringRoom_Lights.SetBrightness(brightness);
                }
                else if (mode == "OFF")
                {
                    GatheringRoom_Lights.TurnOff();
                }
                else if (mode == "DIM")
                {
                    GatheringRoom_Lights.DimTo(LIGHT_MIN_BRIGHTNESS);
                }
                else if (mode == "AMBIENT")
                {
                    GatheringRoom_Lights.SetAmbience(brightness);
                }
            }
            break;

        default:
            break;
    }
}

public void HVACControl(string roomType, string hvacType, string mode, int temperature)
{
    switch (roomType)
    {
        case "BEDROOM":
            if (hvacType == "AC")
            {
                if (mode == "ON")
                {
                    Bedroom_AC.TurnOn();
                    Bedroom_AC.SetTemperature(temperature);
                }
                else if (mode == "OFF")
                {
                    Bedroom_AC.TurnOff();
                }
            }
            break;

        case "MAIN_ROOM":
            if (hvacType == "HEATER")
            {
                if (mode == "ON")
                {
                    Main_Room_Heater.TurnOn();
                    Main_Room_Heater.SetTemperature(temperature);
                }
                else if (mode == "OFF")
                {
                    Main_Room_Heater.TurnOff();
                }
            }
            break;

        case "BATHROOM":
            if (hvacType == "VENTILATION")
            {
                if (mode == "ON")
                {
                    Bathroom_Ventilation.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Bathroom_Ventilation.TurnOff();
                }
            }
            break;

        case "FOYER":
            if (hvacType == "AC")
            {
                if (mode == "ON")
                {
                    Foyer_AC.TurnOn();
                    Foyer_AC.SetTemperature(temperature);
                }
                else if (mode == "OFF")
                {
                    Foyer_AC.TurnOff();
                }
            }
            break;

        case "CONFERENCEROOM":
            if (hvacType == "HEATER")
            {
                if (mode == "ON")
                {
                    ConferenceRoom_Heater.TurnOn();
                    ConferenceRoom_Heater.SetTemperature(temperature);
                }
                else if (mode == "OFF")
                {
                    ConferenceRoom_Heater.TurnOff();
                }
            }
            break;

        case "GATHERINGROOM":
            if (hvacType == "AC_HEATER")
            {
                if (mode == "AC_ON")
                {
                    GatheringRoom_AC.TurnOn();
                    GatheringRoom_AC.SetTemperature(temperature);
                }
                else if (mode == "AC_OFF")
                {
                    GatheringRoom_AC.TurnOff();
                }
                else if (mode == "HEATER_ON")
                {
                    GatheringRoom_Heater.TurnOn();
                    GatheringRoom_Heater.SetTemperature(temperature);
                }
                else if (mode == "HEATER_OFF")
                {
                    GatheringRoom_Heater.TurnOff();
                }
            }
            break;

        default:
            break;
    }
}

public void AVControl(string roomType, string avSystemType, string mode, int volume)
{
    switch (roomType)
    {
        case "BEDROOM":
            if (avSystemType == "TV")
            {
                if (mode == "ON")
                {
                    Bedroom_TV.TurnOn();
                    Bedroom_TV.SetVolume(volume);
                }
                else if (mode == "OFF")
                {
                    Bedroom_TV.TurnOff();
                }
            }
            break;

        case "MAIN_ROOM":
            if (avSystemType == "STEREO")
            {
                if (mode == "ON")
                {
                    Main_Room_Stereo.TurnOn();
                    Main_Room_Stereo.SetVolume(volume);
                }
                else if (mode == "OFF")
                {
                    Main_Room_Stereo.TurnOff();
                }
            }
            break;

        case "BATHROOM":
            if (avSystemType == "RADIO")
            {
                if (mode == "ON")
                {
                    Bathroom_Radio.TurnOn();
                    Bathroom_Radio.SetVolume(volume);
                }
                else if (mode == "OFF")
                {
                    Bathroom_Radio.TurnOff();
                }
            }
            break;

        case "FOYER":
            if (avSystemType == "PA_SYSTEM")
            {
                if (mode == "ON")
                {
                    Foyer_PA_System.TurnOn();
                    Foyer_PA_System.SetVolume(volume);
                }
                else if (mode == "OFF")
                {
                    Foyer_PA_System.TurnOff();
                }
            }
            break;

        case "CONFERENCEROOM":
            if (avSystemType == "PROJECTOR")
            {
                if (mode == "ON")
                {
                    ConferenceRoom_Projector.TurnOn();
                }
                else if (mode == "OFF")
                {
                    ConferenceRoom_Projector.TurnOff();
                }
            }
            break;

        case "GATHERINGROOM":
            if (avSystemType == "MICROPHONE")
            {
                if (mode == "ON")
                {
                    GatheringRoom_Microphone.TurnOn();
                    GatheringRoom_Microphone.SetVolume(volume);
                }
                else if (mode == "OFF")
                {
                    GatheringRoom_Microphone.TurnOff();
                }
            }
            break;

        default:
            break;
    }
}

public void SecurityControl(string roomType, string securitySystemType, string mode)
{
    switch (roomType)
    {
        case "BEDROOM":
            if (securitySystemType == "ALARM")
            {
                if (mode == "ARM")
                {
                    Bedroom_Alarm.Arm();
                }
                else if (mode == "DISARM")
                {
                    Bedroom_Alarm.Disarm();
                }
            }
            break;

        case "MAIN_ROOM":
            if (securitySystemType == "ALARM")
            {
                if (mode == "ARM")
                {
                    Main_Room_Alarm.Arm();
                }
                else if (mode == "DISARM")
                {
                    Main_Room_Alarm.Disarm();
                }
            }
            break;

        case "FOYER":
            if (securitySystemType == "CCTV")
            {
                if (mode == "ON")
                {
                    Foyer_CCTV.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Foyer_CCTV.TurnOff();
                }
            }
            break;

        case "CONFERENCEROOM":
            if (securitySystemType == "DOORLOCK")
            {
                if (mode == "LOCK")
                {
                    ConferenceRoom_DoorLock.Lock();
                }
                else if (mode == "UNLOCK")
                {
                    ConferenceRoom_DoorLock.Unlock();
                }
            }
            break;

        case "GATHERINGROOM":
            if (securitySystemType == "MOTIONDETECTOR")
            {
                if (mode == "ACTIVATE")
                {
                    GatheringRoom_MotionDetector.Activate();
                }
                else if (mode == "DEACTIVATE")
                {
                    GatheringRoom_MotionDetector.Deactivate();
                }
            }
            break;

        default:
            break;
    }
}

public void EnvSensorControl(string roomType, string sensorType, string mode)
{
    switch (roomType)
    {
        case "BEDROOM":
            if (sensorType == "TEMP")
            {
                if (mode == "ON")
                {
                    Bedroom_TempSensor.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Bedroom_TempSensor.TurnOff();
                }
            }
            else if (sensorType == "SMOKE")
            {
                if (mode == "ON")
                {
                    Bedroom_SmokeSensor.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Bedroom_SmokeSensor.TurnOff();
                }
            }
            break;

        case "MAIN_ROOM":
            if (sensorType == "CO2")
            {
                if (mode == "ON")
                {
                    Main_Room_CO2Sensor.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Main_Room_CO2Sensor.TurnOff();
                }
            }
            else if (sensorType == "HUMIDITY")
            {
                if (mode == "ON")
                {
                    Main_Room_HumiditySensor.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Main_Room_HumiditySensor.TurnOff();
                }
            }
            break;

        case "FOYER":
            if (sensorType == "LIGHT")
            {
                if (mode == "ON")
                {
                    Foyer_LightSensor.TurnOn();
                }
                else if (mode == "OFF")
                {
                    Foyer_LightSensor.TurnOff();
                }
            }
            break;

        case "CONFERENCEROOM":
            if (sensorType == "NOISE")
            {
                if (mode == "ON")
                {
                    ConferenceRoom_NoiseSensor.TurnOn();
                }
                else if (mode == "OFF")
                {
                    ConferenceRoom_NoiseSensor.TurnOff();
                }
            }
            break;

        case "GATHERINGROOM":
            if (sensorType == "MOTION")
            {
                if (mode == "ON")
                {
                    GatheringRoom_MotionSensor.TurnOn();
                }
                else if (mode == "OFF")
                {
                    GatheringRoom_MotionSensor.TurnOff();
                }
            }
            break;

        default:
            break;
    }
}

public void SecurityEvent(string eventType, string location)
{
    switch (location)
    {
        case "BEDROOM":
            if (eventType == "INTRUSION")
            {
                Bedroom_SecuritySystem.Alert();
            }
            else if (eventType == "FIRE")
            {
                Bedroom_SecuritySystem.FireAlert();
            }
            break;

        case "MAIN_ROOM":
            if (eventType == "INTRUSION")
            {
                Main_Room_SecuritySystem.Alert();
            }
            else if (eventType == "FIRE")
            {
                Main_Room_SecuritySystem.FireAlert();
            }
            break;

        case "FOYER":
            if (eventType == "INTRUSION")
            {
                Foyer_SecuritySystem.Alert();
            }
            else if (eventType == "FIRE")
            {
                Foyer_SecuritySystem.FireAlert();
            }
            break;

        case "CONFERENCEROOM":
            if (eventType == "INTRUSION")
            {
                ConferenceRoom_SecuritySystem.Alert();
            }
            else if (eventType == "FIRE")
            {
                ConferenceRoom_SecuritySystem.FireAlert();
            }
            break;

        case "GATHERINGROOM":
            if (eventType == "INTRUSION")
            {
                GatheringRoom_SecuritySystem.Alert();
            }
            else if (eventType == "FIRE")
            {
                GatheringRoom_SecuritySystem.FireAlert();
            }
            break;

        case "ELEVATOR":
            if (eventType == "INTRUSION")
            {
                Elevator_SecuritySystem.Alert();
            }
            break;

        case "ELECTRICALROOM":
            if (eventType == "INTRUSION")
            {
                ElectricalRoom_SecuritySystem.Alert();
            }
            break;

        case "SECURITYROOM":
            if (eventType == "INTRUSION")
            {
                SecurityRoom_SecuritySystem.Alert();
            }
            break;

        case "POOLAREA":
            if (eventType == "INTRUSION")
            {
                PoolArea_SecuritySystem.Alert();
            }
            break;

        case "GYM":
            if (eventType == "INTRUSION")
            {
                Gym_SecuritySystem.Alert();
            }
            break;

        case "RESTAURANT":
            if (eventType == "INTRUSION")
            {
                Restaurant_SecuritySystem.Alert();
            }
            break;

        case "PARKING":
            if (eventType == "INTRUSION")
            {
                Parking_SecuritySystem.Alert();
            }
            break;

        default:
            break;
    }
}